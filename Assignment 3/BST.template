/* Author: R.Feron		StNo:c3256870		Lab:Tuesday 12pm
Date: 3 - November - 2017
Course: SENG1120
Task: Assignment 3

This file contains is the implementations file for the BST class. It contains the implementations of the member functions listed in the header file.
*/

#include <cstdlib>
#include <iostream>
#include <string>

namespace lab09
{
	template <typename item>
	BST<item>::BST()
	{
		root = NULL;	//sets the root node to null
		nodes = 0;	//sets the number of nodes to zero
	}
	
	template <typename item>
	BST<item>::BST(const item& data)
	{
		root = new node<item>(data);	//Create a new root node containing the supplied data
		nodes = 1;	//set the number of nodes to 1
	}
	
	template <typename item>
	BST<item>::~BST()
	{
		delete root;	//call the destructor for the node
	}
	
	template <typename item>
	std::size_t BST<item>::size() const
	{
		return nodes;	//return nodes
	}
	
	template <typename item>
	void BST<item>::insert(item& data)
	{
		
		if (root == NULL)
		{
			root = new node<item>(data);	//if the root node does not yet exist, create a root node for the tree
			nodes++;	//increment the number of nodes in the tree
		}
		else
		{
			add(root, data);	//else call the recursive function to add a new node
		}
	}
	
	template <typename item>
	item BST<item>::root_data() const
	{
		return root->get_data();	//return the data of the root node
	}
	
	template<typename item>
	std::ostream& operator << (std::ostream& output, const BST<item>& p)
	{
		if (p.get_root() == NULL)	//if the tree is empty
			output << "Tree is empty " << std::endl;	//inform the user
		else
			p.inOrder(p.get_root(), output);	//else call the recursive function to output the BST through inorder traversal
		return output;
	}
	
	template <typename item>
	void BST<item>::inOrder(node<item>* node, std::ostream& output) const
	{
		if (node != NULL)	//if the current node is not null
		{
			inOrder(node->get_left(), output);	//recursively call the function for the left subtree
			output << node->get_data();	//print details of the node
			inOrder(node->get_right(),output);	//recursively call the function for the right subtree
		}
		return;	
	}
	
	template<typename item>
	node<item>* BST<item>::get_root() const
	{
		return root;	//return a pointer to the root node
	}
	
	template <typename item>
	void BST<item>::add(node<item>* current_node, item& data)
	{
		
		int relation = compare(data,current_node->get_data());	//test the relation of the data to insert, vs data at current node
		
		if (relation >= 0)	//if the data is greater than the data at the current node
		{
			if (current_node->get_right() == NULL)	//if the right child of the current node is empty
			{
				//if required, add new leaf
				current_node->set_right(new node<item>(data, current_node));	//add a new leaf as the right child containing the data
				nodes++;	//increment the number of nodes
				return;

			}
			else
			{
				add(current_node->get_right(),data);	//otherwise, recursive call to work down the right subtree
			}
		}
		else	//if the data is less than the data at the current node
		{
			if (current_node->get_left() == NULL)	//if the left child of the current node is empty
			{
				current_node->set_left(new node<item>(data, current_node));	//add a new leaf as the right child containing the data
				nodes++;	//increment the number of nodes
				return;
			}
			else
			{
				add(current_node->get_left(),data);	//otherwise, recursive call to work down the left subtree
			}
		}
	}
	
	template <typename item>
	int BST<item>::compare(const item& a, const item& b)
	{
		if (a.get_name() < b.get_name())	//if the name of a is less than that of b
		{
			return -1;
		}
		else if (a.get_name() == b.get_name())	//if the name of a is equal to that of b
		{
			return 0;
		}
		else	//if the name of a is greater than that of b
		{
			return 1;
		}
	}	
	
	template <typename item>
	bool BST<item>::search(const std::string& target) const
	{
		return find(root,target);	//call the recursive function to search for the target string
	}
	
	template <typename item>
	bool BST<item>::find(node<item>* current_node, const std::string& target) const
	{
		if (current_node == NULL)
		{
			std::cout << "Name not found " << std::endl;	//if the name has not been found inform the user
			return false;
		}
		else if (current_node->data_name() == target)	//if the name has been found
		{
			std::cout << current_node->get_data() << std::endl;	//output the data of that node
			return true;
		}
		else if (target < current_node->data_name())	//if the target is less than the name at the current node
		{
			return find(current_node->get_left(), target);	//search the left subtree for the target
		}
		else	//if the target is greater than the name at the current node
		{
			return find(current_node->get_right(), target);	//search the right subtree for the target
		}
	}
	
	template<typename item>
	std::size_t BST<item>::occurences(const int& target)
	{
		std::size_t count = 0;	//initialise count to zero
		if (root != NULL)	//if the tree is not empty
		{
			count = target_count(root, target);	//call the recursive function to return the number of occurences of the target
		}
		return count;
	}
	
	template <typename item>
	std::size_t BST<item>::target_count(const node<item>* current_node, const int& target)
	{	
		if (current_node != NULL)	//if the current node is not empty
		{
			if (current_node->data_grade() < target)	//if the grade at the current not is less than the target
			{
				return (1 + target_count(current_node->get_left(), target) + target_count(current_node->get_right(),target));	//add one to the count and recursively search the remainder of the tree
			}
			else
			{
				return (target_count(current_node->get_left(), target) + target_count(current_node->get_right(),target));	//recursively search the remainder of the tree
			}
		}
		else
		{
			return 0;	//return zero if is has not been found
		}
	}
	
	template <typename item>
	int BST<item>::grade_sum()
	{
		int total = 0;	//initialise total to zero
		if (root != NULL)	//if the tree is not empty
		{
			total = sum(root);	//call the recursive function to sum all the grades
		}
		return total;	//return the sum
	}

	
	template <typename item>
	int BST<item>::sum(const node<item>* current_node)
	{	
		if (current_node != NULL)	//if the current node is not empty
		{
			return (current_node->data_grade() + sum(current_node->get_left()) + sum(current_node->get_right()));	//recursively call the function to add the grades of the remainder of the tree to the current node
		}
		else
		{
			return 0;	//else return zero
		}
	}
	
	template<typename item>
	bool BST<item>::remove(int& data)
	{
		if (nodes == 0)	//if the tree is empty
		{
			std::cout << "Cannot delete from an empty tree " << std::endl;
			return false;
		}
		else
		{
			return remove_(root,data);	//call the recursive function to remove the data
		}
	}
	
	template<typename item>
	bool BST<item>::remove_(node<item>* current_node, int& data)
	{
		if (current_node == NULL)
		{
			return false; //indicates node was not found/removed
		}
		
		if (current_node->data_grade() >= data)	//if the data at the current node is greater than or equal to the data
		{
			remove_(current_node->get_left(), data);	//continue searching the left subtree
			remove_(current_node->get_right(), data);	//continue searching the right subtree
		}
		else //target found
		{	//case 1 - leaf
			if (current_node->is_leaf())	//if the current node is a leaf node
			{
				if (root->data_grade() < data)	//if the current node is the root
				{
					root = NULL;	//set the root node to null
				}
				else
				{
					if (current_node->is_right_child()) //if the current node is a right child
					{
						current_node->get_parent()->set_right(NULL);	//set the right child of the parent to null
					}
					else
					{
						current_node->get_parent()->set_left(NULL);	//else set the left child of the parent to null
					}
				}
				delete current_node;	//delete the node
				nodes--;	//decrement the number of nodes
			}
			//case 2 - one child
			else if (current_node->has_one_child())	//if the node has one child
			{
				if (root->data_grade() < data)	//if removing the root node
				{
					if (current_node->get_right() != NULL)	//if the right child of the root is not null
					{
						current_node->get_right()->set_parent(NULL);	//set the parent of the right child to null
						root = current_node->get_right();	//set the root to the right child of the current node
					}
					else
					{
						current_node->get_left()->set_parent(NULL);	//set the parent of the left child to null
						root = current_node->get_left();	//set the root to the left child of the current node
					}
					node<item>* temp_current = root;	//create a temporary pointer to the root
					delete current_node;	//delete the node
					nodes--;	//decrement the number of nodes
					remove_(temp_current, data); //continue searching the tree to remove nodes
				}
				//if removing node with right child
				else if (current_node->get_right() != NULL)
				{
					//reset internal links in the tree
					current_node->get_right()->set_parent(current_node->get_parent());	//set the parent of the right child to the parent of the current node
					if (current_node->is_right_child())	//if the current node is a right child
					{
						current_node->get_parent()->set_right(current_node->get_right());	//set the right child of the parent to the right child of the current node
					}
					else
					{
						current_node->get_parent()->set_left(current_node->get_right());	//set the left child of the parent to the right child of the current node
					}
					node<item>* temp_current = current_node->get_right();
					delete current_node;	//delete the node
					nodes--;	//decrement the number of nodes
					remove_(temp_current, data); //------------------
				}
				//if removing left child
				else
				{
					current_node->get_left()->set_parent(current_node->get_parent());	//set the parent of the left child to the parent of the current node
					if (current_node->is_right_child())	//if the current node is a right child
					{
						current_node->get_parent()->set_right(current_node->get_left());	//set the right child of the parent to the left child of the current node
					}
					else
					{
						current_node->get_parent()->set_left(current_node->get_left());	//set the left child of the parent to the left child of the current node
					}
					node<item>* temp_current = current_node->get_left();	//create a temporary pointer to the left child of the current node
					delete current_node;	//delete the node
					nodes--;	//decrement the number of nodes
					remove_(temp_current, data); //continue searching the tree for nodes to remove
				}
				
			}
			//case 3 - two children
			else
			{
				node<item>* temp_node = find_min(current_node->get_right());	//find smallest node in right subtree
				item* temp_item = new item(temp_node->get_data());	//take copy of its data
				temp_node->set_grade_data(0);	//set the temp_node grade to zero so that it will always be less than the criteria
				remove_(temp_node, data);	//remove the node using recursive call
				current_node->set_data(*temp_item);	//set the copied data as the current nodes data
				node<item>* temp_current = current_node;	//create a temporary pointer to the current node
				remove_(current_node, data);	//continue searching the tree for nodes to remove
			}
			return true;
		}
		return false;
		
	}	
	
	template<typename item>
	node<item>* BST<item>::find_min(node<item>* current_node)
	{
		if(current_node->get_left() != NULL)	//if the left child of the current node is not null
			find_min(current_node->get_left());	//recursive call the function to find the leftmost child of the current node
		else
			return current_node;	//return the pointer to the current node which is the left most child
	}
}